model documents {
    id Int @id() @default(autoincrement())

    entity_id Int
    entity    entity @relation(fields: [entity_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

    partner_id Int
    partner   partners @relation(fields: [partner_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

    spec_doc spec_doc[]
    auto_payment auto_payment[]

    vat_type Boolean
    vat_percent Decimal @db.Decimal(4, 2)

    account_number     String
    date               DateTime @db.Date
    account_sum        Decimal  @db.Decimal(10, 2)
    account_sum_expression String?

    partner_account_number_id Int
    partner_account_number partner_account_number @relation(fields: [partner_account_number_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

    purpose_of_payment String
    note String?

    is_saved Boolean @default(false)
    is_paid  Boolean @default(false)

    user_id Int
    user    user @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
    
    is_auto_payment Boolean @default(false)
    is_auto_purpose_of_payment Boolean @default(true)

    created_at DateTime? @default(now()) @db.Timestamp()
    updated_at DateTime? @updatedAt @db.Timestamp()
    is_deleted Boolean   @default(false)
}

model spec_doc {
    id Int @id() @default(autoincrement())

    documents_id Int
    documents    documents @relation(fields: [documents_id], references: [id])

    auto_payment_id  Int?
    auto_payment     auto_payment?  @relation(fields: [auto_payment_id], references: [id])

    purpose_of_payment String?

    pay_sum        Decimal  @db.Decimal(10, 2)
    expected_date  DateTime? @db.Timestamp()
    dead_line_date DateTime? @db.Timestamp()

    paid_date  DateTime? @db.Timestamp()
    is_paid Boolean @default(false)

    created_at DateTime? @default(now()) @db.Timestamp()
    updated_at DateTime? @updatedAt @db.Timestamp()
    is_deleted Boolean   @default(false)

    @@unique([auto_payment_id, expected_date, is_deleted], name: "spec_auto_date_key")
    @@map("spec_doc")
}

model auto_payment {
    id Int @id() @default(autoincrement())

    documents_id Int
    documents    documents @relation(fields: [documents_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

    pay_sum        Decimal  @db.Decimal(10, 2)
    expected_date  DateTime? @db.Timestamp()
    dead_line_date DateTime? @db.Timestamp()

    user_id Int

    created_at DateTime? @default(now()) @db.Timestamp()
    updated_at DateTime? @updatedAt @db.Timestamp()
    is_deleted Boolean   @default(false)

    spec_docs    spec_doc[]
}

model template {
    id Int @id() @default(autoincrement())
    name String    @db.VarChar
    entity_id Int

    partner_id Int
    partner   partners @relation(fields: [partner_id], references: [id], onDelete: NoAction, onUpdate: NoAction)


    edrpou String
    account_number     String?
    date               DateTime? @db.Date
    account_sum        Decimal?  @db.Decimal(10, 2)
    account_sum_expression String?

    vat_type Boolean
    vat_percent Decimal @db.Decimal(4, 2)

    partner_account_number_id Int
    partner_account_number partner_account_number @relation(fields: [partner_account_number_id], references: [id], onDelete: NoAction, onUpdate: NoAction)


    purpose_of_payment String
    note String?

    user_id Int

    is_auto_purpose_of_payment Boolean @default(true)

    created_at DateTime? @default(now()) @db.Timestamp()
    updated_at DateTime? @updatedAt @db.Timestamp()

    is_visible Boolean   @default(true)
    is_deleted Boolean   @default(false)
    @@unique([entity_id,name])
}
